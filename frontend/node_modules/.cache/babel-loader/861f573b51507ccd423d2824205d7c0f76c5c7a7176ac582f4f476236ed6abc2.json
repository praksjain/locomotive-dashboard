{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/components/TrainCabin.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WebSocketService } from '../services/WebSocketService';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\nimport { soundService } from '../services/SoundService';\nimport { Water } from 'three/examples/jsm/objects/Water';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TrainCabin = () => {\n  _s();\n  const containerRef = useRef(null);\n  const throttleRef = useRef();\n  const wsRef = useRef();\n  const dispatch = useDispatch();\n  const {\n    engineStatus,\n    throttlePosition,\n    speed\n  } = useSelector(state => state.simulation);\n  const [sceneRef, setSceneRef] = useState(null);\n  const [timeOfDay, setTimeOfDay] = useState(12); // 24-hour format\n  const [weather, setWeather] = useState('clear');\n  const sunLightRef = useRef();\n  useEffect(() => {\n    wsRef.current = new WebSocketService(dispatch);\n    wsRef.current.connect();\n  }, [dispatch]);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const scene = new THREE.Scene();\n    scene.background = new THREE.Color(0x87ceeb); // Sky blue background\n\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n    scene.add(ambientLight);\n    const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n    directionalLight.position.set(5, 5, 5);\n    directionalLight.castShadow = true;\n    scene.add(directionalLight);\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n\n    // Load train cabin model\n    const loader = new GLTFLoader();\n    loader.load(\"/assets/train_cabin.glb\", gltf => {\n      scene.add(gltf.scene);\n      // Find throttle lever in the model\n      throttleRef.current = gltf.scene.getObjectByName(\"throttle_lever\");\n    });\n\n    // Add control panel\n    const controlPanel = new THREE.Mesh(new THREE.BoxGeometry(2, 1, 0.1), new THREE.MeshPhongMaterial({\n      color: 0x333333\n    }));\n    controlPanel.position.set(0, -1, -2);\n    scene.add(controlPanel);\n    camera.position.set(0, 1.6, 0); // Eye level\n\n    // Add sky\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    scene.add(sky);\n\n    // Add dynamic lighting\n    const sunLight = new THREE.DirectionalLight(0xffffff, 1);\n    sunLight.position.set(0, 1, 0);\n    sunLight.castShadow = true;\n    scene.add(sunLight);\n    sunLightRef.current = sunLight;\n\n    // Add environment fog\n    scene.fog = new THREE.Fog(0x87ceeb, 1, 1000);\n\n    // Add terrain\n    const terrainGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n    const terrainMaterial = new THREE.MeshStandardMaterial({\n      color: 0x355E3B,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const terrain = new THREE.Mesh(terrainGeometry, terrainMaterial);\n    terrain.rotation.x = -Math.PI / 2;\n    terrain.position.y = -10;\n    terrain.receiveShadow = true;\n    scene.add(terrain);\n\n    // Add railway tracks\n    const trackGeometry = new THREE.BoxGeometry(2, 0.2, 1000);\n    const trackMaterial = new THREE.MeshStandardMaterial({\n      color: 0x4a4a4a\n    });\n    const track = new THREE.Mesh(trackGeometry, trackMaterial);\n    track.position.y = -5;\n    track.receiveShadow = true;\n    scene.add(track);\n\n    // Update throttle controls\n    const handleControls = event => {\n      var _wsRef$current, _wsRef$current2, _wsRef$current3;\n      if (!throttleRef.current) return;\n      switch (event.key) {\n        case 'e':\n          const newEngineStatus = engineStatus === 'off' ? 'on' : 'off';\n          (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.sendUpdate({\n            engine_status: newEngineStatus\n          });\n          if (newEngineStatus === 'on') {\n            soundService.startEngine();\n          } else {\n            soundService.stopEngine();\n          }\n          break;\n        case 'ArrowUp':\n          const newThrottle = Math.min(100, throttlePosition + 5);\n          (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.sendUpdate({\n            throttle_position: newThrottle\n          });\n          soundService.updateThrottle(newThrottle);\n          break;\n        case 'ArrowDown':\n          (_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.sendUpdate({\n            throttle_position: Math.max(0, throttlePosition - 5)\n          });\n          soundService.applyBrake();\n          break;\n        case 't':\n          setTimeOfDay(prev => (prev + 1) % 24);\n          break;\n        case 'w':\n          setWeather(prev => {\n            const states = ['clear', 'rain', 'fog'];\n            const currentIndex = states.indexOf(prev);\n            return states[(currentIndex + 1) % states.length];\n          });\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleControls);\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Add camera shake based on speed\n      if (speed > 0) {\n        const shakeIntensity = speed / 1000;\n        camera.position.y = 1.6 + Math.sin(Date.now() * 0.01) * shakeIntensity;\n        camera.position.x = Math.cos(Date.now() * 0.01) * shakeIntensity;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('keydown', handleControls);\n      renderer.dispose();\n    };\n  }, [engineStatus, throttlePosition, speed]);\n  useEffect(() => {\n    if (!sceneRef) return;\n    if (weather === 'fog') {\n      sceneRef.fog = new THREE.FogExp2(0xcccccc, 0.02);\n    } else {\n      sceneRef.fog = null;\n    }\n  }, [weather, sceneRef]);\n\n  // Add time of day controls\n  useEffect(() => {\n    if (!sceneRef || !sunLightRef.current) return;\n    const sunAngle = (timeOfDay - 12) * (Math.PI / 12);\n    sunLightRef.current.position.x = Math.cos(sunAngle) * 100;\n    sunLightRef.current.position.y = Math.sin(sunAngle) * 100;\n\n    // Update sky color based on time\n    const nightness = 1 - Math.sin(timeOfDay / 24 * Math.PI);\n    sceneRef.background = new THREE.Color(0.5 - nightness * 0.5, 0.7 - nightness * 0.7, 1.0 - nightness * 0.5);\n\n    // Update light intensity\n    sunLightRef.current.intensity = Math.max(0.2, Math.sin(timeOfDay / 24 * Math.PI));\n  }, [timeOfDay, sceneRef]);\n\n  // Add water effect\n  useEffect(() => {\n    if (!sceneRef) return;\n    const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n    const water = new Water(waterGeometry, {\n      textureWidth: 512,\n      textureHeight: 512,\n      waterNormals: new THREE.TextureLoader().load('assets/waternormals.jpg', texture => {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      }),\n      sunDirection: new THREE.Vector3(),\n      sunColor: 0xffffff,\n      waterColor: 0x001e0f,\n      distortionScale: 3.7,\n      fog: sceneRef.fog !== undefined\n    });\n    water.rotation.x = -Math.PI / 2;\n    water.position.y = -15;\n    sceneRef.add(water);\n  }, [sceneRef]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: containerRef,\n    style: {\n      width: '100vw',\n      height: '100vh'\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 228,\n    columnNumber: 12\n  }, this);\n};\n_s(TrainCabin, \"O53p7oUV1py1fC25A8babwOI0Dw=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TrainCabin;\nexport default TrainCabin;\nvar _c;\n$RefreshReg$(_c, \"TrainCabin\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","GLTFLoader","OrbitControls","useDispatch","useSelector","WebSocketService","Sky","soundService","Water","jsxDEV","_jsxDEV","TrainCabin","_s","containerRef","throttleRef","wsRef","dispatch","engineStatus","throttlePosition","speed","state","simulation","sceneRef","setSceneRef","timeOfDay","setTimeOfDay","weather","setWeather","sunLightRef","current","connect","scene","Scene","background","Color","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","directionalLight","DirectionalLight","position","set","castShadow","controls","enableDamping","dampingFactor","loader","load","gltf","getObjectByName","controlPanel","Mesh","BoxGeometry","MeshPhongMaterial","color","sky","scale","setScalar","sunLight","fog","Fog","terrainGeometry","PlaneGeometry","terrainMaterial","MeshStandardMaterial","roughness","metalness","terrain","rotation","x","Math","PI","y","receiveShadow","trackGeometry","trackMaterial","track","handleControls","event","_wsRef$current","_wsRef$current2","_wsRef$current3","key","newEngineStatus","sendUpdate","engine_status","startEngine","stopEngine","newThrottle","min","throttle_position","updateThrottle","max","applyBrake","prev","states","currentIndex","indexOf","length","addEventListener","animate","requestAnimationFrame","shakeIntensity","sin","Date","now","cos","update","render","removeEventListener","dispose","FogExp2","sunAngle","nightness","intensity","waterGeometry","water","textureWidth","textureHeight","waterNormals","TextureLoader","texture","wrapS","wrapT","RepeatWrapping","sunDirection","Vector3","sunColor","waterColor","distortionScale","undefined","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/components/TrainCabin.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { WebSocketService } from '../services/WebSocketService';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\nimport { soundService } from '../services/SoundService';\nimport WeatherEffects from './WeatherEffects';\nimport { Water } from 'three/examples/jsm/objects/Water';\n\nconst TrainCabin: React.FC = () => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const throttleRef = useRef<THREE.Object3D>();\n    const wsRef = useRef<WebSocketService>();\n    const dispatch = useDispatch();\n    const { engineStatus, throttlePosition, speed } = useSelector((state: RootState) => state.simulation);\n    const [sceneRef, setSceneRef] = useState<THREE.Scene | null>(null);\n    const [timeOfDay, setTimeOfDay] = useState(12); // 24-hour format\n    const [weather, setWeather] = useState<'clear' | 'rain' | 'fog'>('clear');\n    const sunLightRef = useRef<THREE.DirectionalLight>();\n    \n    useEffect(() => {\n        wsRef.current = new WebSocketService(dispatch);\n        wsRef.current.connect();\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (!containerRef.current) return;\n\n        const scene = new THREE.Scene();\n        scene.background = new THREE.Color(0x87ceeb); // Sky blue background\n        \n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.shadowMap.enabled = true;\n        containerRef.current.appendChild(renderer.domElement);\n\n        // Add lights\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.5);\n        scene.add(ambientLight);\n        \n        const directionalLight = new THREE.DirectionalLight(0xffffff, 1);\n        directionalLight.position.set(5, 5, 5);\n        directionalLight.castShadow = true;\n        scene.add(directionalLight);\n\n        // Add controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n\n        // Load train cabin model\n        const loader = new GLTFLoader();\n        loader.load(\"/assets/train_cabin.glb\", (gltf) => {\n            scene.add(gltf.scene);\n            // Find throttle lever in the model\n            throttleRef.current = gltf.scene.getObjectByName(\"throttle_lever\");\n        });\n\n        // Add control panel\n        const controlPanel = new THREE.Mesh(\n            new THREE.BoxGeometry(2, 1, 0.1),\n            new THREE.MeshPhongMaterial({ color: 0x333333 })\n        );\n        controlPanel.position.set(0, -1, -2);\n        scene.add(controlPanel);\n\n        camera.position.set(0, 1.6, 0); // Eye level\n        \n        // Add sky\n        const sky = new Sky();\n        sky.scale.setScalar(450000);\n        scene.add(sky);\n\n        // Add dynamic lighting\n        const sunLight = new THREE.DirectionalLight(0xffffff, 1);\n        sunLight.position.set(0, 1, 0);\n        sunLight.castShadow = true;\n        scene.add(sunLight);\n        sunLightRef.current = sunLight;\n\n        // Add environment fog\n        scene.fog = new THREE.Fog(0x87ceeb, 1, 1000);\n\n        // Add terrain\n        const terrainGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const terrainMaterial = new THREE.MeshStandardMaterial({ \n            color: 0x355E3B,\n            roughness: 0.8,\n            metalness: 0.2\n        });\n        const terrain = new THREE.Mesh(terrainGeometry, terrainMaterial);\n        terrain.rotation.x = -Math.PI / 2;\n        terrain.position.y = -10;\n        terrain.receiveShadow = true;\n        scene.add(terrain);\n\n        // Add railway tracks\n        const trackGeometry = new THREE.BoxGeometry(2, 0.2, 1000);\n        const trackMaterial = new THREE.MeshStandardMaterial({ color: 0x4a4a4a });\n        const track = new THREE.Mesh(trackGeometry, trackMaterial);\n        track.position.y = -5;\n        track.receiveShadow = true;\n        scene.add(track);\n\n        // Update throttle controls\n        const handleControls = (event: KeyboardEvent) => {\n            if (!throttleRef.current) return;\n            \n            switch(event.key) {\n                case 'e':\n                    const newEngineStatus = engineStatus === 'off' ? 'on' : 'off';\n                    wsRef.current?.sendUpdate({\n                        engine_status: newEngineStatus\n                    });\n                    if (newEngineStatus === 'on') {\n                        soundService.startEngine();\n                    } else {\n                        soundService.stopEngine();\n                    }\n                    break;\n                case 'ArrowUp':\n                    const newThrottle = Math.min(100, throttlePosition + 5);\n                    wsRef.current?.sendUpdate({\n                        throttle_position: newThrottle\n                    });\n                    soundService.updateThrottle(newThrottle);\n                    break;\n                case 'ArrowDown':\n                    wsRef.current?.sendUpdate({\n                        throttle_position: Math.max(0, throttlePosition - 5)\n                    });\n                    soundService.applyBrake();\n                    break;\n                case 't':\n                    setTimeOfDay((prev) => (prev + 1) % 24);\n                    break;\n                case 'w':\n                    setWeather((prev) => {\n                        const states: ('clear' | 'rain' | 'fog')[] = ['clear', 'rain', 'fog'];\n                        const currentIndex = states.indexOf(prev);\n                        return states[(currentIndex + 1) % states.length];\n                    });\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', handleControls);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            \n            // Add camera shake based on speed\n            if (speed > 0) {\n                const shakeIntensity = speed / 1000;\n                camera.position.y = 1.6 + Math.sin(Date.now() * 0.01) * shakeIntensity;\n                camera.position.x = Math.cos(Date.now() * 0.01) * shakeIntensity;\n            }\n            \n            controls.update();\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Cleanup\n        return () => {\n            window.removeEventListener('keydown', handleControls);\n            renderer.dispose();\n        };\n    }, [engineStatus, throttlePosition, speed]);\n\n    useEffect(() => {\n        if (!sceneRef) return;\n        \n        if (weather === 'fog') {\n            sceneRef.fog = new THREE.FogExp2(0xcccccc, 0.02);\n        } else {\n            sceneRef.fog = null;\n        }\n    }, [weather, sceneRef]);\n\n    // Add time of day controls\n    useEffect(() => {\n        if (!sceneRef || !sunLightRef.current) return;\n        \n        const sunAngle = (timeOfDay - 12) * (Math.PI / 12);\n        sunLightRef.current.position.x = Math.cos(sunAngle) * 100;\n        sunLightRef.current.position.y = Math.sin(sunAngle) * 100;\n        \n        // Update sky color based on time\n        const nightness = 1 - Math.sin((timeOfDay / 24) * Math.PI);\n        sceneRef.background = new THREE.Color(\n            0.5 - nightness * 0.5,\n            0.7 - nightness * 0.7,\n            1.0 - nightness * 0.5\n        );\n        \n        // Update light intensity\n        sunLightRef.current.intensity = Math.max(0.2, Math.sin((timeOfDay / 24) * Math.PI));\n    }, [timeOfDay, sceneRef]);\n\n    // Add water effect\n    useEffect(() => {\n        if (!sceneRef) return;\n        \n        const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n        const water = new Water(waterGeometry, {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals: new THREE.TextureLoader().load('assets/waternormals.jpg', (texture) => {\n                texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n            }),\n            sunDirection: new THREE.Vector3(),\n            sunColor: 0xffffff,\n            waterColor: 0x001e0f,\n            distortionScale: 3.7,\n            fog: sceneRef.fog !== undefined\n        });\n        water.rotation.x = -Math.PI / 2;\n        water.position.y = -15;\n        sceneRef.add(water);\n    }, [sceneRef]);\n\n    return <div ref={containerRef} style={{ width: '100vw', height: '100vh' }} />;\n};\n\nexport default TrainCabin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}