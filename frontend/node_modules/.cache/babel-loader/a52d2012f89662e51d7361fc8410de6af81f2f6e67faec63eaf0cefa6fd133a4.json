{"ast":null,"code":"import { updateSimulation } from '../store/simulationSlice';\nexport class WebSocketService {\n  constructor(dispatch) {\n    this.ws = null;\n    this.dispatch = void 0;\n    this.dispatch = dispatch;\n  }\n  connect() {\n    this.ws = new WebSocket('ws://localhost:8000/ws');\n    this.ws.onopen = () => {\n      console.log('WebSocket Connected');\n    };\n    this.ws.onmessage = event => {\n      const data = JSON.parse(event.data);\n      this.dispatch(updateSimulation(data));\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket Error:', error);\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket Disconnected - Retrying...');\n      setTimeout(() => this.connect(), 1000);\n    };\n  }\n  sendUpdate(data) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending update:', data);\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket not ready');\n    }\n  }\n}","map":{"version":3,"names":["updateSimulation","WebSocketService","constructor","dispatch","ws","connect","WebSocket","onopen","console","log","onmessage","event","data","JSON","parse","onerror","error","onclose","setTimeout","sendUpdate","readyState","OPEN","send","stringify","warn"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/services/WebSocketService.ts"],"sourcesContent":["import { AppDispatch } from '../store';\nimport { updateSimulation } from '../store/simulationSlice';\n\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private dispatch: any;\n\n  constructor(dispatch: any) {\n    this.dispatch = dispatch;\n  }\n\n  connect() {\n    this.ws = new WebSocket('ws://localhost:8000/ws');\n    \n    this.ws.onopen = () => {\n      console.log('WebSocket Connected');\n    };\n\n    this.ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      this.dispatch(updateSimulation(data));\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket Disconnected - Retrying...');\n      setTimeout(() => this.connect(), 1000);\n    };\n  }\n\n  sendUpdate(data: any) {\n    if (this.ws && this.ws.readyState === WebSocket.OPEN) {\n      console.log('Sending update:', data);\n      this.ws.send(JSON.stringify(data));\n    } else {\n      console.warn('WebSocket not ready');\n    }\n  }\n} "],"mappings":"AACA,SAASA,gBAAgB,QAAQ,0BAA0B;AAE3D,OAAO,MAAMC,gBAAgB,CAAC;EAI5BC,WAAWA,CAACC,QAAa,EAAE;IAAA,KAHnBC,EAAE,GAAqB,IAAI;IAAA,KAC3BD,QAAQ;IAGd,IAAI,CAACA,QAAQ,GAAGA,QAAQ;EAC1B;EAEAE,OAAOA,CAAA,EAAG;IACR,IAAI,CAACD,EAAE,GAAG,IAAIE,SAAS,CAAC,wBAAwB,CAAC;IAEjD,IAAI,CAACF,EAAE,CAACG,MAAM,GAAG,MAAM;MACrBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;IACpC,CAAC;IAED,IAAI,CAACL,EAAE,CAACM,SAAS,GAAIC,KAAK,IAAK;MAC7B,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACH,KAAK,CAACC,IAAI,CAAC;MACnC,IAAI,CAACT,QAAQ,CAACH,gBAAgB,CAACY,IAAI,CAAC,CAAC;IACvC,CAAC;IAED,IAAI,CAACR,EAAE,CAACW,OAAO,GAAIC,KAAK,IAAK;MAC3BR,OAAO,CAACQ,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;IAC1C,CAAC;IAED,IAAI,CAACZ,EAAE,CAACa,OAAO,GAAG,MAAM;MACtBT,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;MACnDS,UAAU,CAAC,MAAM,IAAI,CAACb,OAAO,CAAC,CAAC,EAAE,IAAI,CAAC;IACxC,CAAC;EACH;EAEAc,UAAUA,CAACP,IAAS,EAAE;IACpB,IAAI,IAAI,CAACR,EAAE,IAAI,IAAI,CAACA,EAAE,CAACgB,UAAU,KAAKd,SAAS,CAACe,IAAI,EAAE;MACpDb,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEG,IAAI,CAAC;MACpC,IAAI,CAACR,EAAE,CAACkB,IAAI,CAACT,IAAI,CAACU,SAAS,CAACX,IAAI,CAAC,CAAC;IACpC,CAAC,MAAM;MACLJ,OAAO,CAACgB,IAAI,CAAC,qBAAqB,CAAC;IACrC;EACF;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}