{"ast":null,"code":"import{updateSimulation}from'../store/simulationSlice';export class WebSocketService{constructor(dispatch){this.ws=null;this.dispatch=void 0;this.isConnecting=false;this.dispatch=dispatch;}connect(){if(this.isConnecting)return;this.isConnecting=true;console.log('Connecting to WebSocket...');this.ws=new WebSocket('ws://localhost:8000/ws');this.ws.onopen=()=>{console.log('WebSocket Connected');this.isConnecting=false;};this.ws.onmessage=event=>{try{const data=JSON.parse(event.data);console.log('WebSocket received:',data);if(data.engineStatus!==undefined){console.log(\"Updating engine status to: \".concat(data.engineStatus));}this.dispatch(updateSimulation(data));}catch(error){console.error('Error processing message:',error);}};this.ws.onerror=error=>{console.error('WebSocket Error:',error);this.isConnecting=false;};this.ws.onclose=()=>{console.log('WebSocket Disconnected');this.isConnecting=false;setTimeout(()=>this.connect(),1000);};}sendUpdate(data){if(!this.ws||this.ws.readyState!==WebSocket.OPEN){console.warn('WebSocket not ready, attempting to reconnect...');this.connect();return;}try{// Special handling for signal updates\nif(data.signal){console.log(\"Sending signal update: \".concat(data.signal));// For signal updates, directly update the Redux store\nthis.dispatch(updateSimulation({signal:data.signal}));}// Convert camelCase to snake_case for backend\nconst convertedData=Object.entries(data).reduce((acc,_ref)=>{let[key,value]=_ref;const snakeKey=key.replace(/[A-Z]/g,letter=>\"_\".concat(letter.toLowerCase()));acc[snakeKey]=value;return acc;},{});console.log('Sending to server:',convertedData);this.ws.send(JSON.stringify(convertedData));}catch(error){console.error('Error sending message:',error);}}disconnect(){if(this.ws){this.ws.close();}}}","map":{"version":3,"names":["updateSimulation","WebSocketService","constructor","dispatch","ws","isConnecting","connect","console","log","WebSocket","onopen","onmessage","event","data","JSON","parse","engineStatus","undefined","concat","error","onerror","onclose","setTimeout","sendUpdate","readyState","OPEN","warn","signal","convertedData","Object","entries","reduce","acc","_ref","key","value","snakeKey","replace","letter","toLowerCase","send","stringify","disconnect","close"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-dashboard/frontend/src/services/WebSocketService.ts"],"sourcesContent":["import { AppDispatch } from '../store';\nimport { updateSimulation } from '../store/simulationSlice';\n\ninterface WebSocketMessage {\n  lights: boolean;\n  wipers: boolean;\n  horn: boolean;\n  headlights: boolean;\n  doors_locked: boolean;\n  radio: boolean;\n  parking_brake: boolean;\n  auto_mode: boolean;\n  pantograph: boolean;\n  compressor: boolean;\n  sanding: boolean;\n  coupler: boolean;\n  auxiliary_power: boolean;\n  brake_light: boolean;\n  cabin_lights: boolean;\n  cabin_temp: number;\n  fan_speed: number;\n}\n\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private dispatch: any;\n  private isConnecting: boolean = false;\n\n  constructor(dispatch: any) {\n    this.dispatch = dispatch;\n  }\n\n  connect() {\n    if (this.isConnecting) return;\n    this.isConnecting = true;\n\n    console.log('Connecting to WebSocket...');\n    this.ws = new WebSocket('ws://localhost:8000/ws');\n    \n    this.ws.onopen = () => {\n      console.log('WebSocket Connected');\n      this.isConnecting = false;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket received:', data);\n        if (data.engineStatus !== undefined) {\n          console.log(`Updating engine status to: ${data.engineStatus}`);\n        }\n        this.dispatch(updateSimulation(data));\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n      this.isConnecting = false;\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket Disconnected');\n      this.isConnecting = false;\n      setTimeout(() => this.connect(), 1000);\n    };\n  }\n\n  sendUpdate(data: any) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.warn('WebSocket not ready, attempting to reconnect...');\n      this.connect();\n      return;\n    }\n\n    try {\n      // Special handling for signal updates\n      if (data.signal) {\n        console.log(`Sending signal update: ${data.signal}`);\n        \n        // For signal updates, directly update the Redux store\n        this.dispatch(updateSimulation({ signal: data.signal }));\n      }\n      \n      // Convert camelCase to snake_case for backend\n      const convertedData = Object.entries(data).reduce((acc, [key, value]) => {\n        const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n        acc[snakeKey] = value;\n        return acc;\n      }, {} as any);\n\n      console.log('Sending to server:', convertedData);\n      this.ws.send(JSON.stringify(convertedData));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}