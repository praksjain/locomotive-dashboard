{"ast":null,"code":"var _jsxFileName = \"/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/components/TrainCabin.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { WebSocketService } from '../services/WebSocketService';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\nimport { soundService } from '../services/EnhancedSoundService';\nimport WeatherEffects from './WeatherEffects';\nimport { Water } from 'three/examples/jsm/objects/Water';\nimport { createBasicTrainCabin } from '../utils/BasicTrainCabin';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst TrainCabin = () => {\n  _s();\n  const containerRef = useRef(null);\n  const throttleRef = useRef();\n  const wsRef = useRef();\n  const dispatch = useDispatch();\n  const {\n    engineStatus,\n    throttlePosition,\n    speed\n  } = useSelector(state => state.simulation);\n  const [sceneRef, setSceneRef] = useState(null);\n  const [timeOfDay, setTimeOfDay] = useState(12); // 24-hour format\n  const [weather, setWeather] = useState('clear');\n  const sunLightRef = useRef();\n  const controlsRef = useRef();\n  useEffect(() => {\n    wsRef.current = new WebSocketService(dispatch);\n    wsRef.current.connect();\n  }, [dispatch]);\n  useEffect(() => {\n    if (!containerRef.current) return;\n    const scene = new THREE.Scene();\n    setSceneRef(scene);\n    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n    const renderer = new THREE.WebGLRenderer({\n      antialias: true\n    });\n    renderer.setSize(window.innerWidth, window.innerHeight);\n    renderer.shadowMap.enabled = true;\n    containerRef.current.appendChild(renderer.domElement);\n\n    // Add lights\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n    scene.add(ambientLight);\n    const mainLight = new THREE.DirectionalLight(0xffffff, 0.8);\n    mainLight.position.set(5, 5, 5);\n    mainLight.castShadow = true;\n    scene.add(mainLight);\n\n    // Add point lights for cabin interior\n    const interiorLight = new THREE.PointLight(0xffffff, 0.5);\n    interiorLight.position.set(0, 2, 1);\n    scene.add(interiorLight);\n\n    // Add controls\n    const controls = new OrbitControls(camera, renderer.domElement);\n    controls.enableDamping = true;\n    controls.dampingFactor = 0.05;\n    controlsRef.current = controls;\n\n    // Load train cabin model\n    const cabin = createBasicTrainCabin();\n    scene.add(cabin);\n    throttleRef.current = cabin.getObjectByName(\"throttle_lever\");\n\n    // Add control panel\n    const controlPanel = new THREE.Mesh(new THREE.BoxGeometry(2, 1, 0.1), new THREE.MeshPhongMaterial({\n      color: 0x333333\n    }));\n    controlPanel.position.set(0, -1, -2);\n    scene.add(controlPanel);\n    camera.position.set(0, 2, 4); // Move back and up slightly\n    camera.lookAt(0, 1.5, 0);\n\n    // Add sky\n    const sky = new Sky();\n    sky.scale.setScalar(450000);\n    scene.add(sky);\n\n    // Add dynamic lighting\n    const sunLight = new THREE.DirectionalLight(0xffffff, 1);\n    sunLight.position.set(0, 1, 0);\n    sunLight.castShadow = true;\n    scene.add(sunLight);\n    sunLightRef.current = sunLight;\n\n    // Add environment fog\n    scene.fog = new THREE.Fog(0x87ceeb, 1, 1000);\n\n    // Add terrain\n    const terrainGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n    const terrainMaterial = new THREE.MeshStandardMaterial({\n      color: 0x355E3B,\n      roughness: 0.8,\n      metalness: 0.2\n    });\n    const terrain = new THREE.Mesh(terrainGeometry, terrainMaterial);\n    terrain.rotation.x = -Math.PI / 2;\n    terrain.position.y = -10;\n    terrain.receiveShadow = true;\n    scene.add(terrain);\n\n    // Add railway tracks\n    const trackGeometry = new THREE.BoxGeometry(2, 0.2, 1000);\n    const trackMaterial = new THREE.MeshStandardMaterial({\n      color: 0x4a4a4a\n    });\n    const track = new THREE.Mesh(trackGeometry, trackMaterial);\n    track.position.y = -5;\n    track.receiveShadow = true;\n    scene.add(track);\n\n    // Update throttle controls\n    const handleControls = async event => {\n      var _wsRef$current, _wsRef$current2, _wsRef$current3;\n      if (!throttleRef.current) return;\n      switch (event.key) {\n        case 'e':\n          const newEngineStatus = engineStatus === 'off' ? 'on' : 'off';\n          (_wsRef$current = wsRef.current) === null || _wsRef$current === void 0 ? void 0 : _wsRef$current.sendUpdate({\n            engine_status: newEngineStatus\n          });\n          break;\n        case 'ArrowUp':\n          const newThrottle = Math.min(100, throttlePosition + 5);\n          (_wsRef$current2 = wsRef.current) === null || _wsRef$current2 === void 0 ? void 0 : _wsRef$current2.sendUpdate({\n            throttle_position: newThrottle\n          });\n          // Visual feedback for throttle lever\n          if (throttleRef.current) {\n            throttleRef.current.rotation.x = newThrottle / 100 * Math.PI / 4;\n          }\n          break;\n        case 'ArrowDown':\n          const reducedThrottle = Math.max(0, throttlePosition - 5);\n          (_wsRef$current3 = wsRef.current) === null || _wsRef$current3 === void 0 ? void 0 : _wsRef$current3.sendUpdate({\n            throttle_position: reducedThrottle\n          });\n          // Visual feedback for throttle lever\n          if (throttleRef.current) {\n            throttleRef.current.rotation.x = reducedThrottle / 100 * Math.PI / 4;\n          }\n          break;\n        case 't':\n          setTimeOfDay(prev => (prev + 1) % 24);\n          break;\n        case 'w':\n          setWeather(prev => {\n            const states = ['clear', 'rain', 'fog'];\n            const currentIndex = states.indexOf(prev);\n            return states[(currentIndex + 1) % states.length];\n          });\n          break;\n        case 'h':\n          soundService.soundHorn();\n          break;\n        case 'b':\n          soundService.ringBell();\n          break;\n        case 'd':\n          soundService.toggleDoor(true);\n          break;\n      }\n    };\n    window.addEventListener('keydown', handleControls);\n    const animate = () => {\n      requestAnimationFrame(animate);\n\n      // Add camera shake based on speed\n      if (speed > 0) {\n        const shakeIntensity = speed / 1000;\n        camera.position.y = 1.6 + Math.sin(Date.now() * 0.01) * shakeIntensity;\n        camera.position.x = Math.cos(Date.now() * 0.01) * shakeIntensity;\n      }\n      controls.update();\n      renderer.render(scene, camera);\n    };\n    animate();\n\n    // Cleanup\n    return () => {\n      window.removeEventListener('keydown', handleControls);\n      renderer.dispose();\n    };\n  }, [engineStatus, throttlePosition, speed]);\n  useEffect(() => {\n    if (!sceneRef) return;\n    if (weather === 'fog') {\n      sceneRef.fog = new THREE.FogExp2(0xcccccc, 0.02);\n    } else {\n      sceneRef.fog = null;\n    }\n  }, [weather, sceneRef]);\n\n  // Add time of day controls\n  useEffect(() => {\n    if (!sceneRef || !sunLightRef.current) return;\n    const sunAngle = (timeOfDay - 12) * (Math.PI / 12);\n    sunLightRef.current.position.x = Math.cos(sunAngle) * 100;\n    sunLightRef.current.position.y = Math.sin(sunAngle) * 100;\n\n    // Update sky color based on time\n    const nightness = 1 - Math.sin(timeOfDay / 24 * Math.PI);\n    sceneRef.background = new THREE.Color(0.5 - nightness * 0.5, 0.7 - nightness * 0.7, 1.0 - nightness * 0.5);\n\n    // Update light intensity\n    sunLightRef.current.intensity = Math.max(0.2, Math.sin(timeOfDay / 24 * Math.PI));\n  }, [timeOfDay, sceneRef]);\n\n  // Add water effect\n  useEffect(() => {\n    if (!sceneRef) return;\n    const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n    const water = new Water(waterGeometry, {\n      textureWidth: 512,\n      textureHeight: 512,\n      waterNormals: new THREE.TextureLoader().load('assets/waternormals.jpg', texture => {\n        texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n      }),\n      sunDirection: new THREE.Vector3(),\n      sunColor: 0xffffff,\n      waterColor: 0x001e0f,\n      distortionScale: 3.7,\n      fog: sceneRef.fog !== undefined\n    });\n    water.rotation.x = -Math.PI / 2;\n    water.position.y = -15;\n    sceneRef.add(water);\n  }, [sceneRef]);\n\n  // Update controls\n  useEffect(() => {\n    if (!controlsRef.current) return;\n    controlsRef.current.target.set(0, 1.5, 0);\n    controlsRef.current.maxDistance = 10;\n    controlsRef.current.minDistance = 3;\n    controlsRef.current.maxPolarAngle = Math.PI / 2;\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      ref: containerRef,\n      style: {\n        width: '100vw',\n        height: '100vh'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 13\n    }, this), sceneRef && weather === 'rain' && /*#__PURE__*/_jsxDEV(WeatherEffects, {\n      scene: sceneRef\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 48\n    }, this)]\n  }, void 0, true);\n};\n_s(TrainCabin, \"bMBMkCIqIVRJlH2jvU2aT51Kh4U=\", false, function () {\n  return [useDispatch, useSelector];\n});\n_c = TrainCabin;\nexport default TrainCabin;\nvar _c;\n$RefreshReg$(_c, \"TrainCabin\");","map":{"version":3,"names":["React","useEffect","useRef","useState","THREE","OrbitControls","useDispatch","useSelector","WebSocketService","Sky","soundService","WeatherEffects","Water","createBasicTrainCabin","jsxDEV","_jsxDEV","Fragment","_Fragment","TrainCabin","_s","containerRef","throttleRef","wsRef","dispatch","engineStatus","throttlePosition","speed","state","simulation","sceneRef","setSceneRef","timeOfDay","setTimeOfDay","weather","setWeather","sunLightRef","controlsRef","current","connect","scene","Scene","camera","PerspectiveCamera","window","innerWidth","innerHeight","renderer","WebGLRenderer","antialias","setSize","shadowMap","enabled","appendChild","domElement","ambientLight","AmbientLight","add","mainLight","DirectionalLight","position","set","castShadow","interiorLight","PointLight","controls","enableDamping","dampingFactor","cabin","getObjectByName","controlPanel","Mesh","BoxGeometry","MeshPhongMaterial","color","lookAt","sky","scale","setScalar","sunLight","fog","Fog","terrainGeometry","PlaneGeometry","terrainMaterial","MeshStandardMaterial","roughness","metalness","terrain","rotation","x","Math","PI","y","receiveShadow","trackGeometry","trackMaterial","track","handleControls","event","_wsRef$current","_wsRef$current2","_wsRef$current3","key","newEngineStatus","sendUpdate","engine_status","newThrottle","min","throttle_position","reducedThrottle","max","prev","states","currentIndex","indexOf","length","soundHorn","ringBell","toggleDoor","addEventListener","animate","requestAnimationFrame","shakeIntensity","sin","Date","now","cos","update","render","removeEventListener","dispose","FogExp2","sunAngle","nightness","background","Color","intensity","waterGeometry","water","textureWidth","textureHeight","waterNormals","TextureLoader","load","texture","wrapS","wrapT","RepeatWrapping","sunDirection","Vector3","sunColor","waterColor","distortionScale","undefined","target","maxDistance","minDistance","maxPolarAngle","children","ref","style","width","height","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/components/TrainCabin.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from \"react\";\nimport * as THREE from \"three\";\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootState } from '../store';\nimport { WebSocketService } from '../services/WebSocketService';\nimport { Sky } from 'three/examples/jsm/objects/Sky';\nimport { soundService } from '../services/EnhancedSoundService';\nimport WeatherEffects from './WeatherEffects';\nimport { Water } from 'three/examples/jsm/objects/Water';\nimport { createBasicTrainCabin } from '../utils/BasicTrainCabin';\n\nconst TrainCabin: React.FC = () => {\n    const containerRef = useRef<HTMLDivElement>(null);\n    const throttleRef = useRef<THREE.Object3D>();\n    const wsRef = useRef<WebSocketService>();\n    const dispatch = useDispatch();\n    const { engineStatus, throttlePosition, speed } = useSelector((state: RootState) => state.simulation);\n    const [sceneRef, setSceneRef] = useState<THREE.Scene | null>(null);\n    const [timeOfDay, setTimeOfDay] = useState(12); // 24-hour format\n    const [weather, setWeather] = useState<'clear' | 'rain' | 'fog'>('clear');\n    const sunLightRef = useRef<THREE.DirectionalLight>();\n    const controlsRef = useRef<OrbitControls>();\n    \n    useEffect(() => {\n        wsRef.current = new WebSocketService(dispatch);\n        wsRef.current.connect();\n    }, [dispatch]);\n\n    useEffect(() => {\n        if (!containerRef.current) return;\n        const scene = new THREE.Scene();\n        setSceneRef(scene);\n        \n        const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);\n        const renderer = new THREE.WebGLRenderer({ antialias: true });\n        renderer.setSize(window.innerWidth, window.innerHeight);\n        renderer.shadowMap.enabled = true;\n        containerRef.current.appendChild(renderer.domElement);\n\n        // Add lights\n        const ambientLight = new THREE.AmbientLight(0xffffff, 0.6);\n        scene.add(ambientLight);\n        \n        const mainLight = new THREE.DirectionalLight(0xffffff, 0.8);\n        mainLight.position.set(5, 5, 5);\n        mainLight.castShadow = true;\n        scene.add(mainLight);\n\n        // Add point lights for cabin interior\n        const interiorLight = new THREE.PointLight(0xffffff, 0.5);\n        interiorLight.position.set(0, 2, 1);\n        scene.add(interiorLight);\n\n        // Add controls\n        const controls = new OrbitControls(camera, renderer.domElement);\n        controls.enableDamping = true;\n        controls.dampingFactor = 0.05;\n        controlsRef.current = controls;\n\n        // Load train cabin model\n        const cabin = createBasicTrainCabin();\n        scene.add(cabin);\n        throttleRef.current = cabin.getObjectByName(\"throttle_lever\");\n\n        // Add control panel\n        const controlPanel = new THREE.Mesh(\n            new THREE.BoxGeometry(2, 1, 0.1),\n            new THREE.MeshPhongMaterial({ color: 0x333333 })\n        );\n        controlPanel.position.set(0, -1, -2);\n        scene.add(controlPanel);\n\n        camera.position.set(0, 2, 4); // Move back and up slightly\n        camera.lookAt(0, 1.5, 0);\n        \n        // Add sky\n        const sky = new Sky();\n        sky.scale.setScalar(450000);\n        scene.add(sky);\n\n        // Add dynamic lighting\n        const sunLight = new THREE.DirectionalLight(0xffffff, 1);\n        sunLight.position.set(0, 1, 0);\n        sunLight.castShadow = true;\n        scene.add(sunLight);\n        sunLightRef.current = sunLight;\n\n        // Add environment fog\n        scene.fog = new THREE.Fog(0x87ceeb, 1, 1000);\n\n        // Add terrain\n        const terrainGeometry = new THREE.PlaneGeometry(1000, 1000, 100, 100);\n        const terrainMaterial = new THREE.MeshStandardMaterial({ \n            color: 0x355E3B,\n            roughness: 0.8,\n            metalness: 0.2\n        });\n        const terrain = new THREE.Mesh(terrainGeometry, terrainMaterial);\n        terrain.rotation.x = -Math.PI / 2;\n        terrain.position.y = -10;\n        terrain.receiveShadow = true;\n        scene.add(terrain);\n\n        // Add railway tracks\n        const trackGeometry = new THREE.BoxGeometry(2, 0.2, 1000);\n        const trackMaterial = new THREE.MeshStandardMaterial({ color: 0x4a4a4a });\n        const track = new THREE.Mesh(trackGeometry, trackMaterial);\n        track.position.y = -5;\n        track.receiveShadow = true;\n        scene.add(track);\n\n        // Update throttle controls\n        const handleControls = async (event: KeyboardEvent) => {\n            if (!throttleRef.current) return;\n            \n            switch(event.key) {\n                case 'e':\n                    const newEngineStatus = engineStatus === 'off' ? 'on' : 'off';\n                    wsRef.current?.sendUpdate({\n                        engine_status: newEngineStatus\n                    });\n                    break;\n                case 'ArrowUp':\n                    const newThrottle = Math.min(100, throttlePosition + 5);\n                    wsRef.current?.sendUpdate({\n                        throttle_position: newThrottle\n                    });\n                    // Visual feedback for throttle lever\n                    if (throttleRef.current) {\n                        throttleRef.current.rotation.x = (newThrottle / 100) * Math.PI / 4;\n                    }\n                    break;\n                case 'ArrowDown':\n                    const reducedThrottle = Math.max(0, throttlePosition - 5);\n                    wsRef.current?.sendUpdate({\n                        throttle_position: reducedThrottle\n                    });\n                    // Visual feedback for throttle lever\n                    if (throttleRef.current) {\n                        throttleRef.current.rotation.x = (reducedThrottle / 100) * Math.PI / 4;\n                    }\n                    break;\n                case 't':\n                    setTimeOfDay((prev) => (prev + 1) % 24);\n                    break;\n                case 'w':\n                    setWeather((prev) => {\n                        const states: ('clear' | 'rain' | 'fog')[] = ['clear', 'rain', 'fog'];\n                        const currentIndex = states.indexOf(prev);\n                        return states[(currentIndex + 1) % states.length];\n                    });\n                    break;\n                case 'h':\n                    soundService.soundHorn();\n                    break;\n                case 'b':\n                    soundService.ringBell();\n                    break;\n                case 'd':\n                    soundService.toggleDoor(true);\n                    break;\n            }\n        };\n\n        window.addEventListener('keydown', handleControls);\n\n        const animate = () => {\n            requestAnimationFrame(animate);\n            \n            // Add camera shake based on speed\n            if (speed > 0) {\n                const shakeIntensity = speed / 1000;\n                camera.position.y = 1.6 + Math.sin(Date.now() * 0.01) * shakeIntensity;\n                camera.position.x = Math.cos(Date.now() * 0.01) * shakeIntensity;\n            }\n            \n            controls.update();\n            renderer.render(scene, camera);\n        };\n\n        animate();\n\n        // Cleanup\n        return () => {\n            window.removeEventListener('keydown', handleControls);\n            renderer.dispose();\n        };\n    }, [engineStatus, throttlePosition, speed]);\n\n    useEffect(() => {\n        if (!sceneRef) return;\n        \n        if (weather === 'fog') {\n            sceneRef.fog = new THREE.FogExp2(0xcccccc, 0.02);\n        } else {\n            sceneRef.fog = null;\n        }\n    }, [weather, sceneRef]);\n\n    // Add time of day controls\n    useEffect(() => {\n        if (!sceneRef || !sunLightRef.current) return;\n        \n        const sunAngle = (timeOfDay - 12) * (Math.PI / 12);\n        sunLightRef.current.position.x = Math.cos(sunAngle) * 100;\n        sunLightRef.current.position.y = Math.sin(sunAngle) * 100;\n        \n        // Update sky color based on time\n        const nightness = 1 - Math.sin((timeOfDay / 24) * Math.PI);\n        sceneRef.background = new THREE.Color(\n            0.5 - nightness * 0.5,\n            0.7 - nightness * 0.7,\n            1.0 - nightness * 0.5\n        );\n        \n        // Update light intensity\n        sunLightRef.current.intensity = Math.max(0.2, Math.sin((timeOfDay / 24) * Math.PI));\n    }, [timeOfDay, sceneRef]);\n\n    // Add water effect\n    useEffect(() => {\n        if (!sceneRef) return;\n        \n        const waterGeometry = new THREE.PlaneGeometry(10000, 10000);\n        const water = new Water(waterGeometry, {\n            textureWidth: 512,\n            textureHeight: 512,\n            waterNormals: new THREE.TextureLoader().load('assets/waternormals.jpg', (texture) => {\n                texture.wrapS = texture.wrapT = THREE.RepeatWrapping;\n            }),\n            sunDirection: new THREE.Vector3(),\n            sunColor: 0xffffff,\n            waterColor: 0x001e0f,\n            distortionScale: 3.7,\n            fog: sceneRef.fog !== undefined\n        });\n        water.rotation.x = -Math.PI / 2;\n        water.position.y = -15;\n        sceneRef.add(water);\n    }, [sceneRef]);\n\n    // Update controls\n    useEffect(() => {\n        if (!controlsRef.current) return;\n        controlsRef.current.target.set(0, 1.5, 0);\n        controlsRef.current.maxDistance = 10;\n        controlsRef.current.minDistance = 3;\n        controlsRef.current.maxPolarAngle = Math.PI / 2;\n    }, []);\n\n    return (\n        <>\n            <div ref={containerRef} style={{ width: '100vw', height: '100vh' }} />\n            {sceneRef && weather === 'rain' && <WeatherEffects scene={sceneRef} />}\n        </>\n    );\n};\n\nexport default TrainCabin;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}