{"ast":null,"code":"class EnhancedSoundService {\n  constructor() {\n    this.sounds = new Map();\n    this.initialized = false;\n    this.setupSounds();\n  }\n  setupSounds() {\n    const soundFiles = {\n      engineIdle: '/assets/sounds/engine-idle.mp3',\n      engineRevving: '/assets/sounds/engine-revving.mp3',\n      throttle: '/assets/sounds/throttle.mp3',\n      brake: '/assets/sounds/brake.mp3',\n      rails: '/assets/sounds/rails.mp3',\n      wind: '/assets/sounds/wind.mp3',\n      rain: '/assets/sounds/rain.mp3',\n      horn: '/assets/sounds/horn.mp3',\n      bell: '/assets/sounds/bell.mp3',\n      doorOpen: '/assets/sounds/door-open.mp3',\n      doorClose: '/assets/sounds/door-close.mp3',\n      signal: '/assets/sounds/signal.mp3'\n    };\n    Object.entries(soundFiles).forEach(([key, path]) => {\n      const audio = new Audio(path);\n      if (key.startsWith('engine') || ['rails', 'wind', 'rain'].includes(key)) {\n        audio.loop = true;\n      }\n      this.sounds.set(key, audio);\n    });\n  }\n  async init() {\n    try {\n      await Promise.all(Array.from(this.sounds.values()).map(audio => audio.load()));\n      this.initialized = true;\n      console.log('Sound system initialized');\n    } catch (error) {\n      console.warn('Sound initialization failed:', error);\n    }\n  }\n  getSound(key) {\n    return this.sounds.get(key);\n  }\n  async playOneShot(key, volume = 1.0) {\n    const sound = this.getSound(key);\n    if (sound && this.initialized) {\n      try {\n        sound.volume = volume;\n        sound.currentTime = 0;\n        await sound.play();\n      } catch (error) {\n        console.warn(`Failed to play ${key}:`, error);\n      }\n    }\n  }\n  updateEngineSound(throttlePosition, speed) {\n    if (!this.initialized) return;\n    const idleSound = this.getSound('engineIdle');\n    const revSound = this.getSound('engineRevving');\n    if (idleSound && revSound) {\n      const idleVolume = Math.max(0.2, 1 - throttlePosition / 50);\n      const revVolume = Math.min(1.0, throttlePosition / 50);\n      idleSound.volume = idleVolume * 0.7;\n      revSound.volume = revVolume * 0.7;\n    }\n  }\n  updateEnvironmentSounds(speed, weather) {\n    if (!this.initialized) return;\n    const railsSound = this.getSound('rails');\n    const windSound = this.getSound('wind');\n    const rainSound = this.getSound('rain');\n    if (railsSound && windSound) {\n      const speedFactor = Math.min(1.0, speed / 100);\n      railsSound.volume = speedFactor * 0.5;\n      windSound.volume = speedFactor * 0.3;\n    }\n    if (rainSound) {\n      rainSound.volume = weather === 'rain' ? 0.4 : 0;\n    }\n  }\n  async startEngine() {\n    if (!this.initialized) return;\n    const idleSound = this.getSound('engineIdle');\n    const revSound = this.getSound('engineRevving');\n    if (idleSound && revSound) {\n      try {\n        await Promise.all([idleSound.play(), revSound.play()]);\n        idleSound.volume = 0.7;\n        revSound.volume = 0;\n      } catch (error) {\n        console.warn('Failed to start engine sounds:', error);\n      }\n    }\n  }\n  stopEngine() {\n    ['engineIdle', 'engineRevving', 'rails', 'wind'].forEach(key => {\n      const sound = this.getSound(key);\n      if (sound) {\n        sound.pause();\n        sound.currentTime = 0;\n      }\n    });\n  }\n  soundHorn() {\n    this.playOneShot('horn', 0.8);\n  }\n  ringBell() {\n    this.playOneShot('bell', 0.6);\n  }\n  toggleDoor(open) {\n    this.playOneShot(open ? 'doorOpen' : 'doorClose', 0.5);\n  }\n  playSignal() {\n    this.playOneShot('signal', 0.4);\n  }\n}\nexport const soundService = new EnhancedSoundService();","map":{"version":3,"names":["EnhancedSoundService","constructor","sounds","Map","initialized","setupSounds","soundFiles","engineIdle","engineRevving","throttle","brake","rails","wind","rain","horn","bell","doorOpen","doorClose","signal","Object","entries","forEach","key","path","audio","Audio","startsWith","includes","loop","set","init","Promise","all","Array","from","values","map","load","console","log","error","warn","getSound","get","playOneShot","volume","sound","currentTime","play","updateEngineSound","throttlePosition","speed","idleSound","revSound","idleVolume","Math","max","revVolume","min","updateEnvironmentSounds","weather","railsSound","windSound","rainSound","speedFactor","startEngine","stopEngine","pause","soundHorn","ringBell","toggleDoor","open","playSignal","soundService"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/services/EnhancedSoundService.ts"],"sourcesContent":["class EnhancedSoundService {\n    private sounds: Map<string, HTMLAudioElement> = new Map();\n    private initialized: boolean = false;\n    \n    constructor() {\n        this.setupSounds();\n    }\n\n    private setupSounds() {\n        const soundFiles = {\n            engineIdle: '/assets/sounds/engine-idle.mp3',\n            engineRevving: '/assets/sounds/engine-revving.mp3',\n            throttle: '/assets/sounds/throttle.mp3',\n            brake: '/assets/sounds/brake.mp3',\n            rails: '/assets/sounds/rails.mp3',\n            wind: '/assets/sounds/wind.mp3',\n            rain: '/assets/sounds/rain.mp3',\n            horn: '/assets/sounds/horn.mp3',\n            bell: '/assets/sounds/bell.mp3',\n            doorOpen: '/assets/sounds/door-open.mp3',\n            doorClose: '/assets/sounds/door-close.mp3',\n            signal: '/assets/sounds/signal.mp3'\n        };\n\n        Object.entries(soundFiles).forEach(([key, path]) => {\n            const audio = new Audio(path);\n            if (key.startsWith('engine') || ['rails', 'wind', 'rain'].includes(key)) {\n                audio.loop = true;\n            }\n            this.sounds.set(key, audio);\n        });\n    }\n\n    async init() {\n        try {\n            await Promise.all(\n                Array.from(this.sounds.values()).map(audio => audio.load())\n            );\n            this.initialized = true;\n            console.log('Sound system initialized');\n        } catch (error) {\n            console.warn('Sound initialization failed:', error);\n        }\n    }\n\n    private getSound(key: string): HTMLAudioElement | undefined {\n        return this.sounds.get(key);\n    }\n\n    async playOneShot(key: string, volume = 1.0) {\n        const sound = this.getSound(key);\n        if (sound && this.initialized) {\n            try {\n                sound.volume = volume;\n                sound.currentTime = 0;\n                await sound.play();\n            } catch (error) {\n                console.warn(`Failed to play ${key}:`, error);\n            }\n        }\n    }\n\n    updateEngineSound(throttlePosition: number, speed: number) {\n        if (!this.initialized) return;\n\n        const idleSound = this.getSound('engineIdle');\n        const revSound = this.getSound('engineRevving');\n        \n        if (idleSound && revSound) {\n            const idleVolume = Math.max(0.2, 1 - (throttlePosition / 50));\n            const revVolume = Math.min(1.0, throttlePosition / 50);\n            \n            idleSound.volume = idleVolume * 0.7;\n            revSound.volume = revVolume * 0.7;\n        }\n    }\n\n    updateEnvironmentSounds(speed: number, weather: string) {\n        if (!this.initialized) return;\n\n        const railsSound = this.getSound('rails');\n        const windSound = this.getSound('wind');\n        const rainSound = this.getSound('rain');\n\n        if (railsSound && windSound) {\n            const speedFactor = Math.min(1.0, speed / 100);\n            railsSound.volume = speedFactor * 0.5;\n            windSound.volume = speedFactor * 0.3;\n        }\n\n        if (rainSound) {\n            rainSound.volume = weather === 'rain' ? 0.4 : 0;\n        }\n    }\n\n    async startEngine() {\n        if (!this.initialized) return;\n        \n        const idleSound = this.getSound('engineIdle');\n        const revSound = this.getSound('engineRevving');\n        \n        if (idleSound && revSound) {\n            try {\n                await Promise.all([\n                    idleSound.play(),\n                    revSound.play()\n                ]);\n                idleSound.volume = 0.7;\n                revSound.volume = 0;\n            } catch (error) {\n                console.warn('Failed to start engine sounds:', error);\n            }\n        }\n    }\n\n    stopEngine() {\n        ['engineIdle', 'engineRevving', 'rails', 'wind'].forEach(key => {\n            const sound = this.getSound(key);\n            if (sound) {\n                sound.pause();\n                sound.currentTime = 0;\n            }\n        });\n    }\n\n    soundHorn() {\n        this.playOneShot('horn', 0.8);\n    }\n\n    ringBell() {\n        this.playOneShot('bell', 0.6);\n    }\n\n    toggleDoor(open: boolean) {\n        this.playOneShot(open ? 'doorOpen' : 'doorClose', 0.5);\n    }\n\n    playSignal() {\n        this.playOneShot('signal', 0.4);\n    }\n}\n\nexport const soundService = new EnhancedSoundService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}