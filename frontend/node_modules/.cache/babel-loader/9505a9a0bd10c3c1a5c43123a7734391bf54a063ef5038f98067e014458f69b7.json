{"ast":null,"code":"import { soundPaths } from '../utils/soundPaths';\nclass EnhancedSoundService {\n  constructor() {\n    this.sounds = new Map();\n    this.initialized = false;\n    this.setupSounds();\n  }\n  setupSounds() {\n    Object.entries(soundPaths).forEach(([key, path]) => {\n      const audio = new Audio();\n      audio.crossOrigin = \"anonymous\";\n      audio.onerror = () => console.warn(`Failed to load sound: ${path}`);\n      audio.src = path;\n      if (key.startsWith('engine') || ['rails', 'wind', 'rain'].includes(key)) {\n        audio.loop = true;\n      }\n      this.sounds.set(key, audio);\n    });\n  }\n  async init() {}\n  getSound(key) {\n    return this.sounds.get(key);\n  }\n  async playOneShot(key, volume = 1.0) {\n    const sound = this.getSound(key);\n    if (sound && this.initialized) {\n      try {\n        sound.volume = volume;\n        sound.currentTime = 0;\n        await sound.play();\n      } catch (error) {\n        console.warn(`Failed to play ${key}:`, error);\n      }\n    }\n  }\n  updateEngineSound(throttlePosition, speed) {\n    if (!this.initialized) return;\n    const idleSound = this.getSound('engineIdle');\n    const revSound = this.getSound('engineRevving');\n    if (idleSound && revSound) {\n      const idleVolume = Math.max(0.2, 1 - throttlePosition / 50);\n      const revVolume = Math.min(1.0, throttlePosition / 50);\n      idleSound.volume = idleVolume * 0.7;\n      revSound.volume = revVolume * 0.7;\n    }\n  }\n  updateEnvironmentSounds(speed, weather) {\n    if (!this.initialized) return;\n    const railsSound = this.getSound('rails');\n    const windSound = this.getSound('wind');\n    const rainSound = this.getSound('rain');\n    if (railsSound && windSound) {\n      const speedFactor = Math.min(1.0, speed / 100);\n      railsSound.volume = speedFactor * 0.5;\n      windSound.volume = speedFactor * 0.3;\n    }\n    if (rainSound) {\n      rainSound.volume = weather === 'rain' ? 0.4 : 0;\n    }\n  }\n  async startEngine() {}\n  stopEngine() {\n    ['engineIdle', 'engineRevving', 'rails', 'wind'].forEach(key => {\n      const sound = this.getSound(key);\n      if (sound) {\n        sound.pause();\n        sound.currentTime = 0;\n      }\n    });\n  }\n  soundHorn() {}\n  ringBell() {}\n  toggleDoor(open) {\n    this.playOneShot(open ? 'doorOpen' : 'doorClose', 0.5);\n  }\n  playSignal() {}\n  async updateThrottle(position) {\n    await this.playOneShot('throttle', 0.5);\n    this.updateEngineSound(position, 0);\n  }\n  async applyBrake() {}\n}\nexport const soundService = new EnhancedSoundService();","map":{"version":3,"names":["soundPaths","EnhancedSoundService","constructor","sounds","Map","initialized","setupSounds","Object","entries","forEach","key","path","audio","Audio","crossOrigin","onerror","console","warn","src","startsWith","includes","loop","set","init","getSound","get","playOneShot","volume","sound","currentTime","play","error","updateEngineSound","throttlePosition","speed","idleSound","revSound","idleVolume","Math","max","revVolume","min","updateEnvironmentSounds","weather","railsSound","windSound","rainSound","speedFactor","startEngine","stopEngine","pause","soundHorn","ringBell","toggleDoor","open","playSignal","updateThrottle","position","applyBrake","soundService"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-simulator/frontend/src/services/EnhancedSoundService.ts"],"sourcesContent":["import { soundPaths } from '../utils/soundPaths';\n\nclass EnhancedSoundService {\n    private sounds: Map<string, HTMLAudioElement> = new Map();\n    private initialized: boolean = false;\n    \n    constructor() {\n        this.setupSounds();\n    }\n\n    private setupSounds() {\n        Object.entries(soundPaths).forEach(([key, path]) => {\n            const audio = new Audio();\n            audio.crossOrigin = \"anonymous\";\n            audio.onerror = () => console.warn(`Failed to load sound: ${path}`);\n            audio.src = path;\n            if (key.startsWith('engine') || ['rails', 'wind', 'rain'].includes(key)) {\n                audio.loop = true;\n            }\n            this.sounds.set(key, audio);\n        });\n    }\n\n    async init() { }\n\n    private getSound(key: string): HTMLAudioElement | undefined {\n        return this.sounds.get(key);\n    }\n\n    async playOneShot(key: string, volume = 1.0) {\n        const sound = this.getSound(key);\n        if (sound && this.initialized) {\n            try {\n                sound.volume = volume;\n                sound.currentTime = 0;\n                await sound.play();\n            } catch (error) {\n                console.warn(`Failed to play ${key}:`, error);\n            }\n        }\n    }\n\n    updateEngineSound(throttlePosition: number, speed: number) {\n        if (!this.initialized) return;\n\n        const idleSound = this.getSound('engineIdle');\n        const revSound = this.getSound('engineRevving');\n        \n        if (idleSound && revSound) {\n            const idleVolume = Math.max(0.2, 1 - (throttlePosition / 50));\n            const revVolume = Math.min(1.0, throttlePosition / 50);\n            \n            idleSound.volume = idleVolume * 0.7;\n            revSound.volume = revVolume * 0.7;\n        }\n    }\n\n    updateEnvironmentSounds(speed: number, weather: string) {\n        if (!this.initialized) return;\n\n        const railsSound = this.getSound('rails');\n        const windSound = this.getSound('wind');\n        const rainSound = this.getSound('rain');\n\n        if (railsSound && windSound) {\n            const speedFactor = Math.min(1.0, speed / 100);\n            railsSound.volume = speedFactor * 0.5;\n            windSound.volume = speedFactor * 0.3;\n        }\n\n        if (rainSound) {\n            rainSound.volume = weather === 'rain' ? 0.4 : 0;\n        }\n    }\n\n    async startEngine() { }\n\n    stopEngine() {\n        ['engineIdle', 'engineRevving', 'rails', 'wind'].forEach(key => {\n            const sound = this.getSound(key);\n            if (sound) {\n                sound.pause();\n                sound.currentTime = 0;\n            }\n        });\n    }\n\n    soundHorn() { }\n\n    ringBell() { }\n\n    toggleDoor(open: boolean) {\n        this.playOneShot(open ? 'doorOpen' : 'doorClose', 0.5);\n    }\n\n    playSignal() { }\n\n    async updateThrottle(position: number) {\n        await this.playOneShot('throttle', 0.5);\n        this.updateEngineSound(position, 0);\n    }\n\n    async applyBrake() { }\n}\n\nexport const soundService = new EnhancedSoundService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}