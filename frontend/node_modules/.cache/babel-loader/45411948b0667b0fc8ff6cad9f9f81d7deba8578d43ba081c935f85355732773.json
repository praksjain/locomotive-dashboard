{"ast":null,"code":"import { updateSimulation } from '../store/simulationSlice';\nexport class WebSocketService {\n  constructor(dispatch) {\n    this.ws = null;\n    this.dispatch = void 0;\n    this.isConnecting = false;\n    this.dispatch = dispatch;\n  }\n  connect() {\n    if (this.isConnecting) return;\n    this.isConnecting = true;\n    console.log('Connecting to WebSocket...');\n    this.ws = new WebSocket('ws://localhost:8000/ws');\n    this.ws.onopen = () => {\n      console.log('WebSocket Connected');\n      this.isConnecting = false;\n    };\n    this.ws.onmessage = event => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket received:', data);\n        if (data.engineStatus !== undefined) {\n          console.log(`Updating engine status to: ${data.engineStatus}`);\n        }\n        this.dispatch(updateSimulation(data));\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    };\n    this.ws.onerror = error => {\n      console.error('WebSocket Error:', error);\n      this.isConnecting = false;\n    };\n    this.ws.onclose = () => {\n      console.log('WebSocket Disconnected');\n      this.isConnecting = false;\n      setTimeout(() => this.connect(), 1000);\n    };\n  }\n  sendUpdate(data) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.warn('WebSocket not ready, attempting to reconnect...');\n      this.connect();\n      return;\n    }\n    try {\n      // Convert camelCase to snake_case for backend\n      const convertedData = Object.entries(data).reduce((acc, [key, value]) => {\n        const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n        acc[snakeKey] = value;\n        return acc;\n      }, {});\n\n      // Special handling for signal updates - update Redux store directly for immediate UI feedback\n      if (data.signal) {\n        console.log(`Sending signal update: ${data.signal}`);\n        this.dispatch(updateSimulation({\n          signal: data.signal\n        }));\n      }\n      console.log('Sending to server:', convertedData);\n      this.ws.send(JSON.stringify(convertedData));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n}","map":{"version":3,"names":["updateSimulation","WebSocketService","constructor","dispatch","ws","isConnecting","connect","console","log","WebSocket","onopen","onmessage","event","data","JSON","parse","engineStatus","undefined","error","onerror","onclose","setTimeout","sendUpdate","readyState","OPEN","warn","convertedData","Object","entries","reduce","acc","key","value","snakeKey","replace","letter","toLowerCase","signal","send","stringify","disconnect","close"],"sources":["/Users/apple/Documents/Prakhar/Projects/locomotive-dashboard/frontend/src/services/WebSocketService.ts"],"sourcesContent":["import { AppDispatch } from '../store';\nimport { updateSimulation } from '../store/simulationSlice';\n\ninterface WebSocketMessage {\n  lights: boolean;\n  wipers: boolean;\n  horn: boolean;\n  headlights: boolean;\n  doors_locked: boolean;\n  radio: boolean;\n  parking_brake: boolean;\n  auto_mode: boolean;\n  pantograph: boolean;\n  compressor: boolean;\n  sanding: boolean;\n  coupler: boolean;\n  auxiliary_power: boolean;\n  brake_light: boolean;\n  cabin_lights: boolean;\n  cabin_temp: number;\n  fan_speed: number;\n}\n\nexport class WebSocketService {\n  private ws: WebSocket | null = null;\n  private dispatch: any;\n  private isConnecting: boolean = false;\n\n  constructor(dispatch: any) {\n    this.dispatch = dispatch;\n  }\n\n  connect() {\n    if (this.isConnecting) return;\n    this.isConnecting = true;\n\n    console.log('Connecting to WebSocket...');\n    this.ws = new WebSocket('ws://localhost:8000/ws');\n    \n    this.ws.onopen = () => {\n      console.log('WebSocket Connected');\n      this.isConnecting = false;\n    };\n\n    this.ws.onmessage = (event) => {\n      try {\n        const data = JSON.parse(event.data);\n        console.log('WebSocket received:', data);\n        if (data.engineStatus !== undefined) {\n          console.log(`Updating engine status to: ${data.engineStatus}`);\n        }\n        this.dispatch(updateSimulation(data));\n      } catch (error) {\n        console.error('Error processing message:', error);\n      }\n    };\n\n    this.ws.onerror = (error) => {\n      console.error('WebSocket Error:', error);\n      this.isConnecting = false;\n    };\n\n    this.ws.onclose = () => {\n      console.log('WebSocket Disconnected');\n      this.isConnecting = false;\n      setTimeout(() => this.connect(), 1000);\n    };\n  }\n\n  sendUpdate(data: any) {\n    if (!this.ws || this.ws.readyState !== WebSocket.OPEN) {\n      console.warn('WebSocket not ready, attempting to reconnect...');\n      this.connect();\n      return;\n    }\n\n    try {\n      // Convert camelCase to snake_case for backend\n      const convertedData = Object.entries(data).reduce((acc, [key, value]) => {\n        const snakeKey = key.replace(/[A-Z]/g, letter => `_${letter.toLowerCase()}`);\n        acc[snakeKey] = value;\n        return acc;\n      }, {} as any);\n\n      // Special handling for signal updates - update Redux store directly for immediate UI feedback\n      if (data.signal) {\n        console.log(`Sending signal update: ${data.signal}`);\n        this.dispatch(updateSimulation({ signal: data.signal }));\n      }\n\n      console.log('Sending to server:', convertedData);\n      this.ws.send(JSON.stringify(convertedData));\n    } catch (error) {\n      console.error('Error sending message:', error);\n    }\n  }\n\n  disconnect() {\n    if (this.ws) {\n      this.ws.close();\n    }\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}